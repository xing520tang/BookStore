<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    
    <!-- Spring的配置文件，主要配置和业务逻辑有关的 -->
    <!-- 数据源、事务控制等... -->
    <context:component-scan base-package="com.tinyspot">
    	<!-- spring不扫描控制器 -->
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    	
    	<!-- 不扫描ControllerLog类，该类在SpringMvc中扫描，定义在springMvc的配置文件中 -->
    	<!-- <context:exclude-filter type="assignable" expression="com.tinyspot.bs.log.ControllerLog"/> -->
    </context:component-scan>
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    	<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
    	<property name="driverClass" value="${jdbc.driverClass}"></property>
    	<property name="user" value="${jdbc.user}"></property>
    	<property name="password" value="${jdbc.password}"></property>
    </bean>
    <!-- =====================和mybatis的整合======================================= -->
    <!-- 配置和mybatis的整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
    	<property name="dataSource" ref="pooledDataSource"></property>
    	<property name="mapperLocations" value="classpath:mapper/*.xml"></property>    	
    </bean>
    
    <!-- 配置扫描器。将mybatis的接口实现加入到ioc容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    		<!-- 扫描所有的dao接口的实现 -->
    	<property name="basePackage" value="com.tinyspot.bs.dao"></property>
    	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    <!-- 配置一个可以批量注入的sqlsession -->
    <bean id="sqlsession" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
    	<constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>
    <!-- ===========================事务控制的配置============================================= -->
    
    <!-- 开启基于注解的事务管理功能 -->
    <tx:annotation-driven/>
    
    <!-- 事务控制的配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<!-- 控制数据源 -->
    	<property name="dataSource" ref="pooledDataSource"></property>
    </bean>
    
    <!-- 设置aop自动代理 -->
    <aop:aspectj-autoproxy/>
    
    
    <!-- 开启基于注解的事务，使用xml配置的事务（主要用的都是配置式） -->
    <aop:config>
    	<!-- service后的两个点指的是即使service包下还有包也加入 -->
    	<aop:pointcut expression="execution(* com.tinyspot.bs.service..*(..))" id="txPoint"/>
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    
    <!-- 配置事务增强，事务如何切入 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
    		<!-- *意思是所有方法都是事务方法 -->
    		<tx:method name="*"/>
    		<!-- 以get开始的所有方法都是只读的 -->
    		<tx:method name="get*" read-only="true"/>
    	</tx:attributes>
    </tx:advice>
    
    
</beans>